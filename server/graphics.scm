(define plot-id 0)

(define (plot f start stop step)
  (define name (string-append "plot-" (number->string plot-id)))
  (set! plot-id (+ plot-id 1))
  (define arity (procedure-arity f))
  (cond
    ((procedure-arity-valid? f 1)
      (let iter ((x start) (x-values '()) (y-values '()))
        (if (< x stop)
            (iter (+ x step) (cons x x-values) (cons (f x) y-values))
            (send `((action plot) (name ,name)
                    (data (((x ,x-values)
                            (y ,y-values)))))))))
    ((procedure-arity-valid? f 2)
      (let iter-x ((x start) (x-values '()) (y-values '()) (z-values '()))
        (if (< x stop)
          (let iter-y ((y start) (x-values x-values) (y-values y-values) (z-values z-values))
            (if (< y stop)
              (iter-y (+ y step) (cons x x-values) (cons y y-values) (cons (f x y) z-values))
              (iter-x (+ x step) x-values y-values z-values)))
          (send `((action plot) (name ,name)
                  (data (((type "mesh3d")
                          (x ,x-values)
                          (y ,y-values)
                          (z ,z-values)))))))))
    (else (error "procedure f does not accept valid arities of 1 or 2"))))
