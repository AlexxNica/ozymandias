(define start "<")
(define end ">")

(define (send-number number)
  (define string (number->string number))
  (cond ((equal? "." (substring string 0 1))
          (display "0")
          (display string))
        ((and (> (string-length string) 2)
              (equal? "-." (substring string 0 2)))
          (display "-0.")
          (display (substring string 2 (string-length string))))
        (else (display string))))

(define (send-string string)
  (write string))

(define (send-symbol symbol)
  (display "\"")
  (display symbol)
  (display "\""))

(define (send-list list)
  (display "[")
  (send-data (car list))
  (for-each (lambda (elem) (display ",") (send-data elem)) (cdr list))
  (display "]"))

(define (send-dict dict)
  (display "{")
  (send-data (caar dict))
  (display ":")
  (send-data (cadar dict))
  (for-each
    (lambda (pair)
      (display ",")
      (send-data (car pair))
      (display ":") (send-data (cadr pair)))
    (cdr dict))
  (display "}"))

(define (send-data data)
  (cond ((and (list? data)
              (every (lambda (datum)
                       (and (list? datum)
                         (= (length datum) 2)
                         (symbol? (car datum)))) data))
          (send-dict data))
        ((list? data)
          (send-list data))
        ((number? data)
          (send-number data))
        ((string? data)
          (send-string data))
        ((symbol? data)
          (send-symbol data))
        (else (display "panic at the disco"))))

(define (send data)
  (display start)
  (send-data data)
  (display end))

(define (plot f start end step)
  (define ymin 0)
  (define ymax 0)
  (let iter ((x start) (vals '()))
    (let ((y (f x)))
      (if (< y ymin)
        (set! ymin y)
        (if (> y ymax)
          (set! ymax y)
          '()))
      (if (< x end)
        (iter (+ x step) (cons `((x ,x) (y ,y)) vals))
        (send `((type "plot") (name "hello")
                (range ((x (,start ,end)) (y (,ymin ,ymax))))
                (data ,vals)))))))

;(send
;  '((type "plot") (name "hello")
;    (data (((x 0) (y 0)) ((x 1) (y 1)) ((x 2) (y 2))))
;    (range ((x (-1 4)) (y (-1 4))))))
