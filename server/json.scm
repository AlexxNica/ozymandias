(define out-file (open-output-file out-file-name))

(define (write string)
  (display string out-file))

(define (send-number number)
  (define string (number->string number))
  (define length-of-string (string-length string))
  (cond ((equal? "." (substring string 0 1))
          (write "0")
          (write string))
        ((and (> length-of-string 2)
              (equal? "-." (substring string 0 2)))
          (write "-0.")
          (write (substring string 2 length-of-string)))
        ((equal? "." (substring string (- length-of-string 1) length-of-string))
          (write string)
          (write "0"))
        (else (write string))))

(define (send-string string)
  (write "\"")
  (write string)
  (write "\""))

(define (send-symbol symbol)
  (write "\"")
  (write symbol)
  (write "\""))

(define (send-list list)
  (write "[")
  (send-data (car list))
  (for-each (lambda (elem) (write ",") (send-data elem)) (cdr list))
  (write "]"))

(define (send-boolean bool)
  (if bool (write "true") (write "false")))

(define (send-dict dict)
  (write "{")
  (send-data (caar dict))
  (write ":")
  (send-data (cadar dict))
  (for-each
    (lambda (pair)
      (write ",")
      (send-data (car pair))
      (write ":") (send-data (cadr pair)))
    (cdr dict))
  (write "}"))

(define (send-data data)
  (cond ((and (list? data)
              (every (lambda (datum)
                       (and (list? datum)
                         (= (length datum) 2)
                         (symbol? (car datum)))) data))
          (send-dict data))
        ((list? data)
          (send-list data))
        ((number? data)
          (send-number data))
        ((string? data)
          (send-string data))
        ((symbol? data)
          (send-symbol data))
        ((boolean? data)
          (send-boolean data))
        (else (write "panic at the disco"))))

(define (send data)
  (send-data data)
  (write "\n")
  (flush-output out-file))
