(define (get-latex object)
  (ignore-errors
    (lambda () (expression->tex-string object))))

(define (print-string string port)
  (write-string (string-append "[" (string->json string) "]") port)
  (write-char delimiter port)
  (flush-output port))

(define (print-undefined port)
  (print-string "#| No return value |#" port))

(define (print-primitive object port environment)
  (let ((string (open-output-string)))
    (write-string "#| " string)
    (write object string environment)
    (write-string " |#" string)
    (print-string (get-output-string string) port)))

(define (print-complex val port)
  (let ((string (open-output-string))
        (latex (get-latex val)))
    (write-string "[" port)
    (write-string "#|\n" string)
    (pp val string)
    (write-string "|#" string)
    (write-string (string->json (get-output-string string)) port)
    (if (string? latex)
      (write-string (string-append "," (string->json latex) "]") port)
      (write-string "]" port))
    (write-char delimiter port)
    (flush-output port)))

(define (print-record object port environment)
  (let ((name (record-type-name (record-type-descriptor object)))
        (description (record-description object)))
    (let ((val `(*record* ,name ,@description)))
      (print-simplifiable val port environment))))

(define (print-simplifiable object port environment)
  (prepare-for-printing object simplify)
  (let ((val (*last-expression-printed*)))
    (if ((disjunction symbol? number?) val)
      (print-primitive val port environment)
      (print-complex val port))))

(define (lambda/repl-write object s-expression environment repl)
  ;(let ((port (cmdl/port repl)))
  (let ((port eval-port))
    (cond
      ((and (symbol? object) (eq? '*silence* object)))
      ((unsimplifiable? object)
        (if (undefined-value? object)
          (print-undefined port)
          (print-primitive object port environment)))
      ((or (symbol? object) (list? object) (vector? object) (procedure? object))
	      (print-simplifiable object port environment))
      ((record? object) (print-record object port environment))
	  (else (print-primitive object port environment)))))

(set! hook/repl-write lambda/repl-write)
